// This file was generated by Mendix Studio Pro.
//
// WARNING: Code you write here will be lost the next time you deploy the project.

package taskqueuehelpers.proxies.microflows;

import java.util.HashMap;
import java.util.Map;
import com.mendix.core.Core;
import com.mendix.core.CoreException;
import com.mendix.systemwideinterfaces.MendixRuntimeException;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.systemwideinterfaces.core.IMendixObject;

public class Microflows
{
	// These are the microflows for the TaskQueueHelpers module
	public static java.lang.Long cleanupCompletedProcessedTasks(IContext context, java.lang.Long _older_than_hours)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("older_than_hours", _older_than_hours);
		return (java.lang.Long) Core.microflowCall("TaskQueueHelpers.CleanupCompletedProcessedTasks").withParams(params).execute(context);
	}
	public static java.lang.Long cleanupNonCompletedProcessedTasks(IContext context, java.lang.Long _older_than_hours)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("older_than_hours", _older_than_hours);
		return (java.lang.Long) Core.microflowCall("TaskQueueHelpers.CleanupNonCompletedProcessedTasks").withParams(params).execute(context);
	}
	public static java.lang.Long cleanupProcessedTasks(IContext context)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		return (java.lang.Long) Core.microflowCall("TaskQueueHelpers.CleanupProcessedTasks").withParams(params).execute(context);
	}
	public static java.lang.Long cleanUpProcessedTasksByStatus(IContext context, taskqueuehelpers.proxies.TaskStatus _taskStatus, java.lang.Long _time_in_hours)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("TaskStatus", _taskStatus == null ? null : _taskStatus.name());
		params.put("time_in_hours", _time_in_hours);
		return (java.lang.Long) Core.microflowCall("TaskQueueHelpers.CleanUpProcessedTasksByStatus").withParams(params).execute(context);
	}
	public static taskqueuehelpers.proxies.CreateTaskParameters createTaskParamter(IContext context)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		IMendixObject result = (IMendixObject)Core.microflowCall("TaskQueueHelpers.CreateTaskParamter").withParams(params).execute(context);
		return result == null ? null : taskqueuehelpers.proxies.CreateTaskParameters.initialize(context, result);
	}
	public static void deleteProcessedTasks(IContext context, java.util.List<taskqueuehelpers.proxies.ProcessedTask> _processedTasks, taskqueuehelpers.proxies.CreateTaskParameters _createTaskParameters)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		java.util.ArrayList<IMendixObject> listparam_processedTasks = null;
		if (_processedTasks != null)
		{
			listparam_processedTasks = new java.util.ArrayList<>();
			for (taskqueuehelpers.proxies.ProcessedTask obj : _processedTasks)
				listparam_processedTasks.add(obj.getMendixObject());
		}
		params.put("ProcessedTasks", listparam_processedTasks);

		params.put("CreateTaskParameters", _createTaskParameters == null ? null : _createTaskParameters.getMendixObject());
		Core.microflowCall("TaskQueueHelpers.DeleteProcessedTasks").withParams(params).execute(context);
	}
	public static taskqueuehelpers.proxies.QueueCount microflowForBarChart(IContext context)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		IMendixObject result = (IMendixObject)Core.microflowCall("TaskQueueHelpers.MicroflowForBarChart").withParams(params).execute(context);
		return result == null ? null : taskqueuehelpers.proxies.QueueCount.initialize(context, result);
	}
	public static java.util.List<taskqueuehelpers.proxies.ProcessedTask> microflowForPieChart(IContext context, taskqueuehelpers.proxies.QueueCount _processedTask)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("ProcessedTask", _processedTask == null ? null : _processedTask.getMendixObject());
		java.util.List<IMendixObject> objs = Core.microflowCall("TaskQueueHelpers.MicroflowForPieChart").withParams(params).execute(context);
		java.util.List<taskqueuehelpers.proxies.ProcessedTask> result = null;
		if (objs != null)
		{
			result = new java.util.ArrayList<>();
			for (IMendixObject obj : objs)
				result.add(taskqueuehelpers.proxies.ProcessedTask.initialize(context, obj));
		}
		return result;
	}
	public static void refreshProcessedTasks(IContext context)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		Core.microflowCall("TaskQueueHelpers.RefreshProcessedTasks").withParams(params).execute(context);
	}
	public static java.util.List<taskqueuehelpers.proxies.ProcessedQueueCount> retrieveProcessedQueueCount(IContext context, taskqueuehelpers.proxies.QueueCount _processedTask)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("ProcessedTask", _processedTask == null ? null : _processedTask.getMendixObject());
		java.util.List<IMendixObject> objs = Core.microflowCall("TaskQueueHelpers.RetrieveProcessedQueueCount").withParams(params).execute(context);
		java.util.List<taskqueuehelpers.proxies.ProcessedQueueCount> result = null;
		if (objs != null)
		{
			result = new java.util.ArrayList<>();
			for (IMendixObject obj : objs)
				result.add(taskqueuehelpers.proxies.ProcessedQueueCount.initialize(context, obj));
		}
		return result;
	}
	public static java.util.List<taskqueuehelpers.proxies.ProcessedTask> retrieveProcessedTasksByParameters(IContext context, taskqueuehelpers.proxies.CreateTaskParameters _filterParameter)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("FilterParameter", _filterParameter == null ? null : _filterParameter.getMendixObject());
		java.util.List<IMendixObject> objs = Core.microflowCall("TaskQueueHelpers.RetrieveProcessedTasksByParameters").withParams(params).execute(context);
		java.util.List<taskqueuehelpers.proxies.ProcessedTask> result = null;
		if (objs != null)
		{
			result = new java.util.ArrayList<>();
			for (IMendixObject obj : objs)
				result.add(taskqueuehelpers.proxies.ProcessedTask.initialize(context, obj));
		}
		return result;
	}
	public static java.util.List<taskqueuehelpers.proxies.QueueCount> retrieveQueueCounts(IContext context)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		java.util.List<IMendixObject> objs = Core.microflowCall("TaskQueueHelpers.RetrieveQueueCounts").withParams(params).execute(context);
		java.util.List<taskqueuehelpers.proxies.QueueCount> result = null;
		if (objs != null)
		{
			result = new java.util.ArrayList<>();
			for (IMendixObject obj : objs)
				result.add(taskqueuehelpers.proxies.QueueCount.initialize(context, obj));
		}
		return result;
	}
}