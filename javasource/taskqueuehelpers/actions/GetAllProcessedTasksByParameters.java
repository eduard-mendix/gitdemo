// This file was generated by Mendix Studio Pro.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
// Special characters, e.g., é, ö, à, etc. are supported in comments.

package taskqueuehelpers.actions;

import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.systemwideinterfaces.core.IMendixObjectMember;
import com.mendix.webui.CustomJavaAction;
import com.mendix.systemwideinterfaces.core.IMendixObject;
import com.mendix.core.Core;
import java.util.*;
import java.util.stream.Collectors;

public class GetAllProcessedTasksByParameters extends CustomJavaAction<java.util.List<IMendixObject>>
{
	private IMendixObject __Parameter;
	private taskqueuehelpers.proxies.CreateTaskParameters Parameter;

	public GetAllProcessedTasksByParameters(IContext context, IMendixObject Parameter)
	{
		super(context);
		this.__Parameter = Parameter;
	}

	@java.lang.Override
	public java.util.List<IMendixObject> executeAction() throws Exception
	{
		this.Parameter = __Parameter == null ? null : taskqueuehelpers.proxies.CreateTaskParameters.initialize(getContext(), __Parameter);

		// BEGIN USER CODE
		IContext ctx = getContext();
		Optional<String> filter = Optional.of("");
		if(Parameter!=null){
			filter = buildFilterFromParams();
			if(filter.isEmpty())
				return Collections.emptyList();
		}
		List<IMendixObject> npeProcessedTasks = new ArrayList<>();
		List<IMendixObject> processedTasks = Core.retrieveXPathQuery(ctx, "//System.ProcessedQueueTask"+filter.get());
		
		Collection<String> attributes = processedTasks.isEmpty() ? Collections.emptyList()
				: getProcessedTaskAttributes(processedTasks.get(0));

		for (IMendixObject processedTask : processedTasks) {
			IMendixObject npeProcessedTask = Core.instantiate(ctx, TASKQUEUEHELPERS_PROCESSEDTASK);
			attributes.forEach(attribute -> copyMendixAttributeValue(processedTask, npeProcessedTask, attribute));
			npeProcessedTask.setValue(ctx, "StatusString", processedTask.getValue(ctx, "Status"));
			npeProcessedTask.setValue(ctx, "OriginalMendixId", processedTask.getId().toLong());
			npeProcessedTasks.add(npeProcessedTask);
		}
		if(__Parameter!=null){
		boolean sortByDate = Boolean.valueOf(getValueFromAttribute(__Parameter, "Sort"));
		if(sortByDate){
			Comparator<IMendixObject> dateComparator = new Comparator<>(){
				public int compare(IMendixObject obj1, IMendixObject obj2){
					Date startedDate1 = getDateValueFromAttribute(obj1, "Started");
					Date startedDate2 = getDateValueFromAttribute(obj2, "Started");
					return startedDate2.compareTo(startedDate1);
				}
			};
			Collections.sort(npeProcessedTasks, dateComparator);
		}
		}
		return npeProcessedTasks;
		// END USER CODE
	}

	/**
	 * Returns a string representation of this action
	 */
	@java.lang.Override
	public java.lang.String toString()
	{
		return "GetAllProcessedTasksByParameters";
	}

	// BEGIN EXTRA CODE

	private static final String TASKQUEUEHELPERS_PROCESSEDTASK = "TaskQueueHelpers.ProcessedTask";

	/**
	 * Helper method to copy attribute value from source {@link IMendixObject} to
	 * target {@link IMendixObject}
	 * 
	 * @param sourceObj - Source object to get the value
	 * @param targetObj - Target object to set the value
	 * @param attribute - attribute of the object to copy
	 */
	private void copyMendixAttributeValue(IMendixObject sourceObj, IMendixObject targetObj, String attribute) {
		targetObj.setValue(getContext(), attribute, sourceObj.getValue(getContext(), attribute));
	}

	private Optional<String> buildFilterFromParams(){
		StringBuilder builder = new StringBuilder();

		boolean isSuccessful = Boolean.valueOf(getValueFromAttribute(__Parameter, "Successful"));
		boolean isNotSuccessful = Boolean.valueOf(getValueFromAttribute(__Parameter, "NonSuccessful"));
		builder.append("[");
		if(isSuccessful){
			builder.append(" Status='Completed' ");
		}

		if(isNotSuccessful){
			if(isSuccessful)
				builder.append(" or ");
			builder.append(" Status!='Completed' ");
		}
		builder.append("]");
		String filter = builder.toString();
		return "[]".equals(filter) ? Optional.empty() : Optional.of(filter);
	}

	private String getValueFromAttribute(IMendixObject sourceObj, String attribute){
		Object value = sourceObj.getValue(getContext(), attribute);
		return value == null || value.toString().isBlank()? "":value.toString();
	}

	private Date getDateValueFromAttribute(IMendixObject sourceObj, String attribute){
		Object value = sourceObj.getValue(getContext(), attribute);
		return value == null ? null : (Date)value;
	}

	/**
	 * Get Attribute names of ProcessedTask Entity
	 * @return a List of attribute names
	 */
	private Collection<String> getProcessedTaskAttributes(IMendixObject objForMetadata) {
		return objForMetadata.getMembers(getContext()).values().stream().map(IMendixObjectMember::getName)
				.collect(Collectors.toList());
	}

	// END EXTRA CODE
}
