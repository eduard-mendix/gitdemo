// This file was generated by Mendix Studio Pro.
//
// WARNING: Code you write here will be lost the next time you deploy the project.

package pushnotifications.proxies;

public class MessagingServiceSettings
{
	private final com.mendix.systemwideinterfaces.core.IMendixObject messagingServiceSettingsMendixObject;

	private final com.mendix.systemwideinterfaces.core.IContext context;

	/**
	 * Internal name of this entity
	 */
	public static final java.lang.String entityName = "PushNotifications.MessagingServiceSettings";

	/**
	 * Enum describing members of this entity
	 */
	public enum MemberNames
	{
		Enabled("Enabled"),
		Name("Name"),
		DTAPMode("DTAPMode"),
		MessagingServiceType("MessagingServiceType"),
		AndroidMessagingService("PushNotifications.AndroidMessagingService"),
		iOSMessagingService("PushNotifications.iOSMessagingService");

		private java.lang.String metaName;

		MemberNames(java.lang.String s)
		{
			metaName = s;
		}

		@java.lang.Override
		public java.lang.String toString()
		{
			return metaName;
		}
	}

	public MessagingServiceSettings(com.mendix.systemwideinterfaces.core.IContext context)
	{
		this(context, com.mendix.core.Core.instantiate(context, "PushNotifications.MessagingServiceSettings"));
	}

	protected MessagingServiceSettings(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixObject messagingServiceSettingsMendixObject)
	{
		if (messagingServiceSettingsMendixObject == null)
			throw new java.lang.IllegalArgumentException("The given object cannot be null.");
		if (!com.mendix.core.Core.isSubClassOf("PushNotifications.MessagingServiceSettings", messagingServiceSettingsMendixObject.getType()))
			throw new java.lang.IllegalArgumentException("The given object is not a PushNotifications.MessagingServiceSettings");

		this.messagingServiceSettingsMendixObject = messagingServiceSettingsMendixObject;
		this.context = context;
	}

	/**
	 * @deprecated Use 'MessagingServiceSettings.load(IContext, IMendixIdentifier)' instead.
	 */
	@java.lang.Deprecated
	public static pushnotifications.proxies.MessagingServiceSettings initialize(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixIdentifier mendixIdentifier) throws com.mendix.core.CoreException
	{
		return pushnotifications.proxies.MessagingServiceSettings.load(context, mendixIdentifier);
	}

	/**
	 * Initialize a proxy using context (recommended). This context will be used for security checking when the get- and set-methods without context parameters are called.
	 * The get- and set-methods with context parameter should be used when for instance sudo access is necessary (IContext.createSudoClone() can be used to obtain sudo access).
	 */
	public static pushnotifications.proxies.MessagingServiceSettings initialize(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixObject mendixObject)
	{
		if (com.mendix.core.Core.isSubClassOf("PushNotifications.APNSSettings", mendixObject.getType()))
			return pushnotifications.proxies.APNSSettings.initialize(context, mendixObject);

		if (com.mendix.core.Core.isSubClassOf("PushNotifications.FCMSettings", mendixObject.getType()))
			return pushnotifications.proxies.FCMSettings.initialize(context, mendixObject);

		return new pushnotifications.proxies.MessagingServiceSettings(context, mendixObject);
	}

	public static pushnotifications.proxies.MessagingServiceSettings load(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixIdentifier mendixIdentifier) throws com.mendix.core.CoreException
	{
		com.mendix.systemwideinterfaces.core.IMendixObject mendixObject = com.mendix.core.Core.retrieveId(context, mendixIdentifier);
		return pushnotifications.proxies.MessagingServiceSettings.initialize(context, mendixObject);
	}

	public static java.util.List<? extends pushnotifications.proxies.MessagingServiceSettings> load(com.mendix.systemwideinterfaces.core.IContext context, java.lang.String xpathConstraint) throws com.mendix.core.CoreException
	{
		java.util.List<pushnotifications.proxies.MessagingServiceSettings> result = new java.util.ArrayList<pushnotifications.proxies.MessagingServiceSettings>();
		for (com.mendix.systemwideinterfaces.core.IMendixObject obj : com.mendix.core.Core.retrieveXPathQuery(context, "//PushNotifications.MessagingServiceSettings" + xpathConstraint))
			result.add(pushnotifications.proxies.MessagingServiceSettings.initialize(context, obj));
		return result;
	}

	/**
	 * Commit the changes made on this proxy object.
	 */
	public final void commit() throws com.mendix.core.CoreException
	{
		com.mendix.core.Core.commit(context, getMendixObject());
	}

	/**
	 * Commit the changes made on this proxy object using the specified context.
	 */
	public final void commit(com.mendix.systemwideinterfaces.core.IContext context) throws com.mendix.core.CoreException
	{
		com.mendix.core.Core.commit(context, getMendixObject());
	}

	/**
	 * Delete the object.
	 */
	public final void delete()
	{
		com.mendix.core.Core.delete(context, getMendixObject());
	}

	/**
	 * Delete the object using the specified context.
	 */
	public final void delete(com.mendix.systemwideinterfaces.core.IContext context)
	{
		com.mendix.core.Core.delete(context, getMendixObject());
	}
	/**
	 * @return value of Enabled
	 */
	public final java.lang.Boolean getEnabled()
	{
		return getEnabled(getContext());
	}

	/**
	 * @param context
	 * @return value of Enabled
	 */
	public final java.lang.Boolean getEnabled(com.mendix.systemwideinterfaces.core.IContext context)
	{
		return (java.lang.Boolean) getMendixObject().getValue(context, MemberNames.Enabled.toString());
	}

	/**
	 * Set value of Enabled
	 * @param enabled
	 */
	public final void setEnabled(java.lang.Boolean enabled)
	{
		setEnabled(getContext(), enabled);
	}

	/**
	 * Set value of Enabled
	 * @param context
	 * @param enabled
	 */
	public final void setEnabled(com.mendix.systemwideinterfaces.core.IContext context, java.lang.Boolean enabled)
	{
		getMendixObject().setValue(context, MemberNames.Enabled.toString(), enabled);
	}

	/**
	 * @return value of Name
	 */
	public final java.lang.String getName()
	{
		return getName(getContext());
	}

	/**
	 * @param context
	 * @return value of Name
	 */
	public final java.lang.String getName(com.mendix.systemwideinterfaces.core.IContext context)
	{
		return (java.lang.String) getMendixObject().getValue(context, MemberNames.Name.toString());
	}

	/**
	 * Set value of Name
	 * @param name
	 */
	public final void setName(java.lang.String name)
	{
		setName(getContext(), name);
	}

	/**
	 * Set value of Name
	 * @param context
	 * @param name
	 */
	public final void setName(com.mendix.systemwideinterfaces.core.IContext context, java.lang.String name)
	{
		getMendixObject().setValue(context, MemberNames.Name.toString(), name);
	}

	/**
	 * Set value of DTAPMode
	 * @param dtapmode
	 */
	public final pushnotifications.proxies.DTAPMode getDTAPMode()
	{
		return getDTAPMode(getContext());
	}

	/**
	 * @param context
	 * @return value of DTAPMode
	 */
	public final pushnotifications.proxies.DTAPMode getDTAPMode(com.mendix.systemwideinterfaces.core.IContext context)
	{
		Object obj = getMendixObject().getValue(context, MemberNames.DTAPMode.toString());
		if (obj == null)
			return null;

		return pushnotifications.proxies.DTAPMode.valueOf((java.lang.String) obj);
	}

	/**
	 * Set value of DTAPMode
	 * @param dtapmode
	 */
	public final void setDTAPMode(pushnotifications.proxies.DTAPMode dtapmode)
	{
		setDTAPMode(getContext(), dtapmode);
	}

	/**
	 * Set value of DTAPMode
	 * @param context
	 * @param dtapmode
	 */
	public final void setDTAPMode(com.mendix.systemwideinterfaces.core.IContext context, pushnotifications.proxies.DTAPMode dtapmode)
	{
		if (dtapmode != null)
			getMendixObject().setValue(context, MemberNames.DTAPMode.toString(), dtapmode.toString());
		else
			getMendixObject().setValue(context, MemberNames.DTAPMode.toString(), null);
	}

	/**
	 * Set value of MessagingServiceType
	 * @param messagingservicetype
	 */
	public final pushnotifications.proxies.MessagingServices getMessagingServiceType()
	{
		return getMessagingServiceType(getContext());
	}

	/**
	 * @param context
	 * @return value of MessagingServiceType
	 */
	public final pushnotifications.proxies.MessagingServices getMessagingServiceType(com.mendix.systemwideinterfaces.core.IContext context)
	{
		Object obj = getMendixObject().getValue(context, MemberNames.MessagingServiceType.toString());
		if (obj == null)
			return null;

		return pushnotifications.proxies.MessagingServices.valueOf((java.lang.String) obj);
	}

	/**
	 * Set value of MessagingServiceType
	 * @param messagingservicetype
	 */
	public final void setMessagingServiceType(pushnotifications.proxies.MessagingServices messagingservicetype)
	{
		setMessagingServiceType(getContext(), messagingservicetype);
	}

	/**
	 * Set value of MessagingServiceType
	 * @param context
	 * @param messagingservicetype
	 */
	public final void setMessagingServiceType(com.mendix.systemwideinterfaces.core.IContext context, pushnotifications.proxies.MessagingServices messagingservicetype)
	{
		if (messagingservicetype != null)
			getMendixObject().setValue(context, MemberNames.MessagingServiceType.toString(), messagingservicetype.toString());
		else
			getMendixObject().setValue(context, MemberNames.MessagingServiceType.toString(), null);
	}

	/**
	 * @return value of AndroidMessagingService
	 */
	public final pushnotifications.proxies.PushPreferences getAndroidMessagingService() throws com.mendix.core.CoreException
	{
		return getAndroidMessagingService(getContext());
	}

	/**
	 * @param context
	 * @return value of AndroidMessagingService
	 */
	public final pushnotifications.proxies.PushPreferences getAndroidMessagingService(com.mendix.systemwideinterfaces.core.IContext context) throws com.mendix.core.CoreException
	{
		pushnotifications.proxies.PushPreferences result = null;
		com.mendix.systemwideinterfaces.core.IMendixIdentifier identifier = getMendixObject().getValue(context, MemberNames.AndroidMessagingService.toString());
		if (identifier != null)
			result = pushnotifications.proxies.PushPreferences.load(context, identifier);
		return result;
	}

	/**
	 * Set value of AndroidMessagingService
	 * @param androidmessagingservice
	 */
	public final void setAndroidMessagingService(pushnotifications.proxies.PushPreferences androidmessagingservice)
	{
		setAndroidMessagingService(getContext(), androidmessagingservice);
	}

	/**
	 * Set value of AndroidMessagingService
	 * @param context
	 * @param androidmessagingservice
	 */
	public final void setAndroidMessagingService(com.mendix.systemwideinterfaces.core.IContext context, pushnotifications.proxies.PushPreferences androidmessagingservice)
	{
		if (androidmessagingservice == null)
			getMendixObject().setValue(context, MemberNames.AndroidMessagingService.toString(), null);
		else
			getMendixObject().setValue(context, MemberNames.AndroidMessagingService.toString(), androidmessagingservice.getMendixObject().getId());
	}

	/**
	 * @return value of iOSMessagingService
	 */
	public final pushnotifications.proxies.PushPreferences getiOSMessagingService() throws com.mendix.core.CoreException
	{
		return getiOSMessagingService(getContext());
	}

	/**
	 * @param context
	 * @return value of iOSMessagingService
	 */
	public final pushnotifications.proxies.PushPreferences getiOSMessagingService(com.mendix.systemwideinterfaces.core.IContext context) throws com.mendix.core.CoreException
	{
		pushnotifications.proxies.PushPreferences result = null;
		com.mendix.systemwideinterfaces.core.IMendixIdentifier identifier = getMendixObject().getValue(context, MemberNames.iOSMessagingService.toString());
		if (identifier != null)
			result = pushnotifications.proxies.PushPreferences.load(context, identifier);
		return result;
	}

	/**
	 * Set value of iOSMessagingService
	 * @param iosmessagingservice
	 */
	public final void setiOSMessagingService(pushnotifications.proxies.PushPreferences iosmessagingservice)
	{
		setiOSMessagingService(getContext(), iosmessagingservice);
	}

	/**
	 * Set value of iOSMessagingService
	 * @param context
	 * @param iosmessagingservice
	 */
	public final void setiOSMessagingService(com.mendix.systemwideinterfaces.core.IContext context, pushnotifications.proxies.PushPreferences iosmessagingservice)
	{
		if (iosmessagingservice == null)
			getMendixObject().setValue(context, MemberNames.iOSMessagingService.toString(), null);
		else
			getMendixObject().setValue(context, MemberNames.iOSMessagingService.toString(), iosmessagingservice.getMendixObject().getId());
	}

	/**
	 * @return the IMendixObject instance of this proxy for use in the Core interface.
	 */
	public final com.mendix.systemwideinterfaces.core.IMendixObject getMendixObject()
	{
		return messagingServiceSettingsMendixObject;
	}

	/**
	 * @return the IContext instance of this proxy, or null if no IContext instance was specified at initialization.
	 */
	public final com.mendix.systemwideinterfaces.core.IContext getContext()
	{
		return context;
	}

	@java.lang.Override
	public boolean equals(Object obj)
	{
		if (obj == this)
			return true;

		if (obj != null && getClass().equals(obj.getClass()))
		{
			final pushnotifications.proxies.MessagingServiceSettings that = (pushnotifications.proxies.MessagingServiceSettings) obj;
			return getMendixObject().equals(that.getMendixObject());
		}
		return false;
	}

	@java.lang.Override
	public int hashCode()
	{
		return getMendixObject().hashCode();
	}

	/**
	 * @return String name of this class
	 */
	public static java.lang.String getType()
	{
		return "PushNotifications.MessagingServiceSettings";
	}

	/**
	 * @return String GUID from this object, format: ID_0000000000
	 * @deprecated Use getMendixObject().getId().toLong() to get a unique identifier for this object.
	 */
	@java.lang.Deprecated
	public java.lang.String getGUID()
	{
		return "ID_" + getMendixObject().getId().toLong();
	}
}
