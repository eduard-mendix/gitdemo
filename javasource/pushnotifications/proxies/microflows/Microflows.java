// This file was generated by Mendix Studio Pro.
//
// WARNING: Code you write here will be lost the next time you deploy the project.

package pushnotifications.proxies.microflows;

import java.util.HashMap;
import java.util.Map;
import com.mendix.core.Core;
import com.mendix.core.CoreException;
import com.mendix.systemwideinterfaces.MendixRuntimeException;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.systemwideinterfaces.core.IMendixObject;

public class Microflows
{
	// These are the microflows for the PushNotifications module
	public static void aCo_Device(IContext context, pushnotifications.proxies.Device _device)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("Device", _device == null ? null : _device.getMendixObject());
		Core.microflowCall("PushNotifications.ACo_Device").withParams(params).execute(context);
	}
	public static void aCo_DeviceRegistration(IContext context, pushnotifications.proxies.DeviceRegistration _deviceRegistration)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("DeviceRegistration", _deviceRegistration == null ? null : _deviceRegistration.getMendixObject());
		Core.microflowCall("PushNotifications.ACo_DeviceRegistration").withParams(params).execute(context);
	}
	public static void afterStartup_APNS(IContext context)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		Core.microflowCall("PushNotifications.AfterStartup_APNS").withParams(params).execute(context);
	}
	public static boolean afterStartup_PushNotifications(IContext context)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		return (java.lang.Boolean) Core.microflowCall("PushNotifications.AfterStartup_PushNotifications").withParams(params).execute(context);
	}
	public static boolean bCo_DeviceRegistration(IContext context, pushnotifications.proxies.DeviceRegistration _deviceRegistration)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("DeviceRegistration", _deviceRegistration == null ? null : _deviceRegistration.getMendixObject());
		return (java.lang.Boolean) Core.microflowCall("PushNotifications.BCo_DeviceRegistration").withParams(params).execute(context);
	}
	public static pushnotifications.proxies.Message createAndSendMessageToDevice(IContext context, pushnotifications.proxies.Device _device, pushnotifications.proxies.MessageData _messageData)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("Device", _device == null ? null : _device.getMendixObject());
		params.put("MessageData", _messageData == null ? null : _messageData.getMendixObject());
		IMendixObject result = (IMendixObject)Core.microflowCall("PushNotifications.CreateAndSendMessageToDevice").withParams(params).execute(context);
		return result == null ? null : pushnotifications.proxies.Message.initialize(context, result);
	}
	public static java.util.List<pushnotifications.proxies.Message> createAndSendMessageToDevices(IContext context, java.util.List<pushnotifications.proxies.Device> _deviceList, pushnotifications.proxies.MessageData _messageData)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		java.util.ArrayList<IMendixObject> listparam_deviceList = null;
		if (_deviceList != null)
		{
			listparam_deviceList = new java.util.ArrayList<>();
			for (pushnotifications.proxies.Device obj : _deviceList)
				listparam_deviceList.add(obj.getMendixObject());
		}
		params.put("DeviceList", listparam_deviceList);

		params.put("MessageData", _messageData == null ? null : _messageData.getMendixObject());
		java.util.List<IMendixObject> objs = Core.microflowCall("PushNotifications.CreateAndSendMessageToDevices").withParams(params).execute(context);
		java.util.List<pushnotifications.proxies.Message> result = null;
		if (objs != null)
		{
			result = new java.util.ArrayList<>();
			for (IMendixObject obj : objs)
				result.add(pushnotifications.proxies.Message.initialize(context, obj));
		}
		return result;
	}
	public static java.util.List<pushnotifications.proxies.Message> createAndSendMessageToUser(IContext context, system.proxies.User _user, pushnotifications.proxies.MessageData _messageData)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("User", _user == null ? null : _user.getMendixObject());
		params.put("MessageData", _messageData == null ? null : _messageData.getMendixObject());
		java.util.List<IMendixObject> objs = Core.microflowCall("PushNotifications.CreateAndSendMessageToUser").withParams(params).execute(context);
		java.util.List<pushnotifications.proxies.Message> result = null;
		if (objs != null)
		{
			result = new java.util.ArrayList<>();
			for (IMendixObject obj : objs)
				result.add(pushnotifications.proxies.Message.initialize(context, obj));
		}
		return result;
	}
	public static java.util.List<pushnotifications.proxies.Message> createAndSendMessageToUsers(IContext context, java.util.List<system.proxies.User> _userList, pushnotifications.proxies.MessageData _messageData)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		java.util.ArrayList<IMendixObject> listparam_userList = null;
		if (_userList != null)
		{
			listparam_userList = new java.util.ArrayList<>();
			for (system.proxies.User obj : _userList)
				listparam_userList.add(obj.getMendixObject());
		}
		params.put("UserList", listparam_userList);

		params.put("MessageData", _messageData == null ? null : _messageData.getMendixObject());
		java.util.List<IMendixObject> objs = Core.microflowCall("PushNotifications.CreateAndSendMessageToUsers").withParams(params).execute(context);
		java.util.List<pushnotifications.proxies.Message> result = null;
		if (objs != null)
		{
			result = new java.util.ArrayList<>();
			for (IMendixObject obj : objs)
				result.add(pushnotifications.proxies.Message.initialize(context, obj));
		}
		return result;
	}
	/**
	 * This microflow will create a message implementation based on the arguments given. It will select the corresponding attributes for the specific implementations.
	 */
	public static java.util.List<pushnotifications.proxies.Message> createMessages(IContext context, java.util.List<pushnotifications.proxies.Device> _deviceList, pushnotifications.proxies.MessageData _messageData)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		java.util.ArrayList<IMendixObject> listparam_deviceList = null;
		if (_deviceList != null)
		{
			listparam_deviceList = new java.util.ArrayList<>();
			for (pushnotifications.proxies.Device obj : _deviceList)
				listparam_deviceList.add(obj.getMendixObject());
		}
		params.put("DeviceList", listparam_deviceList);

		params.put("MessageData", _messageData == null ? null : _messageData.getMendixObject());
		java.util.List<IMendixObject> objs = Core.microflowCall("PushNotifications.CreateMessages").withParams(params).execute(context);
		java.util.List<pushnotifications.proxies.Message> result = null;
		if (objs != null)
		{
			result = new java.util.ArrayList<>();
			for (IMendixObject obj : objs)
				result.add(pushnotifications.proxies.Message.initialize(context, obj));
		}
		return result;
	}
	public static void deleteDevice(IContext context, java.lang.String _registrationId)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("RegistrationId", _registrationId);
		Core.microflowCall("PushNotifications.DeleteDevice").withParams(params).execute(context);
	}
	public static void deleteDevice_Impl(IContext context, pushnotifications.proxies.Device _device)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("Device", _device == null ? null : _device.getMendixObject());
		Core.microflowCall("PushNotifications.DeleteDevice_Impl").withParams(params).execute(context);
	}
	public static java.util.List<pushnotifications.proxies.MessagingServiceSettings> dS_GetAvailableMessagingServicesForAndroid(IContext context, pushnotifications.proxies.PushPreferences _pushPreferences)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("PushPreferences", _pushPreferences == null ? null : _pushPreferences.getMendixObject());
		java.util.List<IMendixObject> objs = Core.microflowCall("PushNotifications.DS_GetAvailableMessagingServicesForAndroid").withParams(params).execute(context);
		java.util.List<pushnotifications.proxies.MessagingServiceSettings> result = null;
		if (objs != null)
		{
			result = new java.util.ArrayList<>();
			for (IMendixObject obj : objs)
				result.add(pushnotifications.proxies.MessagingServiceSettings.initialize(context, obj));
		}
		return result;
	}
	public static java.util.List<pushnotifications.proxies.MessagingServiceSettings> dS_GetAvailableMessagingServicesForIOS(IContext context, pushnotifications.proxies.PushPreferences _pushPreferences)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("PushPreferences", _pushPreferences == null ? null : _pushPreferences.getMendixObject());
		java.util.List<IMendixObject> objs = Core.microflowCall("PushNotifications.DS_GetAvailableMessagingServicesForIOS").withParams(params).execute(context);
		java.util.List<pushnotifications.proxies.MessagingServiceSettings> result = null;
		if (objs != null)
		{
			result = new java.util.ArrayList<>();
			for (IMendixObject obj : objs)
				result.add(pushnotifications.proxies.MessagingServiceSettings.initialize(context, obj));
		}
		return result;
	}
	public static pushnotifications.proxies.FCMPrivateKey dS_GetOrCreateFCMPrivateKey(IContext context, pushnotifications.proxies.FCMSettings _fCMSettings)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("FCMSettings", _fCMSettings == null ? null : _fCMSettings.getMendixObject());
		IMendixObject result = (IMendixObject)Core.microflowCall("PushNotifications.DS_GetOrCreateFCMPrivateKey").withParams(params).execute(context);
		return result == null ? null : pushnotifications.proxies.FCMPrivateKey.initialize(context, result);
	}
	public static pushnotifications.proxies.PushPreferences dS_GetOrCreatePushPreferences(IContext context)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		IMendixObject result = (IMendixObject)Core.microflowCall("PushNotifications.DS_GetOrCreatePushPreferences").withParams(params).execute(context);
		return result == null ? null : pushnotifications.proxies.PushPreferences.initialize(context, result);
	}
	public static void failMessageImmediately(IContext context, pushnotifications.proxies.Message _message, java.lang.String _errorMessage)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("Message", _message == null ? null : _message.getMendixObject());
		params.put("ErrorMessage", _errorMessage);
		Core.microflowCall("PushNotifications.FailMessageImmediately").withParams(params).execute(context);
	}
	public static void failOrRetryMessage(IContext context, pushnotifications.proxies.Message _message, java.lang.String _errorMessage)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("Message", _message == null ? null : _message.getMendixObject());
		params.put("ErrorMessage", _errorMessage);
		Core.microflowCall("PushNotifications.FailOrRetryMessage").withParams(params).execute(context);
	}
	public static pushnotifications.proxies.MessagingServiceSettings getActiveMessagingServiceForAndroid(IContext context)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		IMendixObject result = (IMendixObject)Core.microflowCall("PushNotifications.GetActiveMessagingServiceForAndroid").withParams(params).execute(context);
		return result == null ? null : pushnotifications.proxies.MessagingServiceSettings.initialize(context, result);
	}
	public static pushnotifications.proxies.MessagingServiceSettings getActiveMessagingServiceForIOS(IContext context)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		IMendixObject result = (IMendixObject)Core.microflowCall("PushNotifications.GetActiveMessagingServiceForIOS").withParams(params).execute(context);
		return result == null ? null : pushnotifications.proxies.MessagingServiceSettings.initialize(context, result);
	}
	public static pushnotifications.proxies.MessagingServices getActiveMessagingServiceTypeForAndroid(IContext context)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		java.lang.String result = (java.lang.String) Core.microflowCall("PushNotifications.GetActiveMessagingServiceTypeForAndroid").withParams(params).execute(context);
		return result == null ? null : pushnotifications.proxies.MessagingServices.valueOf(result);
	}
	public static pushnotifications.proxies.MessagingServices getActiveMessagingServiceTypeForIOS(IContext context)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		java.lang.String result = (java.lang.String) Core.microflowCall("PushNotifications.GetActiveMessagingServiceTypeForIOS").withParams(params).execute(context);
		return result == null ? null : pushnotifications.proxies.MessagingServices.valueOf(result);
	}
	public static pushnotifications.proxies.DTAPMode getDTAPMode(IContext context, pushnotifications.proxies.PushPreferences _pushPreferences)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("PushPreferences", _pushPreferences == null ? null : _pushPreferences.getMendixObject());
		java.lang.String result = (java.lang.String) Core.microflowCall("PushNotifications.GetDTAPMode").withParams(params).execute(context);
		return result == null ? null : pushnotifications.proxies.DTAPMode.valueOf(result);
	}
	public static pushnotifications.proxies.APNSCertificate getOrCreateAPNSCertificate(IContext context, pushnotifications.proxies.APNSSettings _aPNSettings)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("APNSettings", _aPNSettings == null ? null : _aPNSettings.getMendixObject());
		IMendixObject result = (IMendixObject)Core.microflowCall("PushNotifications.GetOrCreateAPNSCertificate").withParams(params).execute(context);
		return result == null ? null : pushnotifications.proxies.APNSCertificate.initialize(context, result);
	}
	public static pushnotifications.proxies.APNSToken getOrCreateAPNSToken(IContext context, pushnotifications.proxies.APNSSettings _aPNSettings)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("APNSettings", _aPNSettings == null ? null : _aPNSettings.getMendixObject());
		IMendixObject result = (IMendixObject)Core.microflowCall("PushNotifications.GetOrCreateAPNSToken").withParams(params).execute(context);
		return result == null ? null : pushnotifications.proxies.APNSToken.initialize(context, result);
	}
	public static void iVK_CancelMessages(IContext context, java.util.List<pushnotifications.proxies.Message> _messageList)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		java.util.ArrayList<IMendixObject> listparam_messageList = null;
		if (_messageList != null)
		{
			listparam_messageList = new java.util.ArrayList<>();
			for (pushnotifications.proxies.Message obj : _messageList)
				listparam_messageList.add(obj.getMendixObject());
		}
		params.put("MessageList", listparam_messageList);

		Core.microflowCall("PushNotifications.IVK_CancelMessages").withParams(params).execute(context);
	}
	public static void iVK_CreateAPNSSettings(IContext context)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		Core.microflowCall("PushNotifications.IVK_CreateAPNSSettings").withParams(params).execute(context);
	}
	public static void iVK_EditAPNSSettings(IContext context, pushnotifications.proxies.APNSSettings _aPNSSettings)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("APNSSettings", _aPNSSettings == null ? null : _aPNSSettings.getMendixObject());
		Core.microflowCall("PushNotifications.IVK_EditAPNSSettings").withParams(params).execute(context);
	}
	public static void iVK_OpenSendMessageForm(IContext context, java.util.List<pushnotifications.proxies.Device> _devices)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		java.util.ArrayList<IMendixObject> listparam_devices = null;
		if (_devices != null)
		{
			listparam_devices = new java.util.ArrayList<>();
			for (pushnotifications.proxies.Device obj : _devices)
				listparam_devices.add(obj.getMendixObject());
		}
		params.put("Devices", listparam_devices);

		Core.microflowCall("PushNotifications.IVK_OpenSendMessageForm").withParams(params).execute(context);
	}
	public static void iVK_SaveAndRestartAPN(IContext context, pushnotifications.proxies.APNSSettings _aPNSettings)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("APNSettings", _aPNSettings == null ? null : _aPNSettings.getMendixObject());
		Core.microflowCall("PushNotifications.IVK_SaveAndRestartAPN").withParams(params).execute(context);
	}
	public static void iVK_SaveFCMSettings(IContext context, pushnotifications.proxies.FCMSettings _fCMSettings)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("FCMSettings", _fCMSettings == null ? null : _fCMSettings.getMendixObject());
		Core.microflowCall("PushNotifications.IVK_SaveFCMSettings").withParams(params).execute(context);
	}
	public static void iVK_SendMessagesToDevices(IContext context, pushnotifications.proxies.MessageView _messageView)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("MessageView", _messageView == null ? null : _messageView.getMendixObject());
		Core.microflowCall("PushNotifications.IVK_SendMessagesToDevices").withParams(params).execute(context);
	}
	public static pushnotifications.proxies.MessageData prepareMessageData(IContext context, java.lang.String _title, java.lang.String _body, java.lang.Long _timeToLive, java.lang.Long _badge, java.lang.String _actionName, java.lang.Long _contextObjectGuid)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("Title", _title);
		params.put("Body", _body);
		params.put("TimeToLive", _timeToLive);
		params.put("Badge", _badge);
		params.put("ActionName", _actionName);
		params.put("ContextObjectGuid", _contextObjectGuid);
		IMendixObject result = (IMendixObject)Core.microflowCall("PushNotifications.PrepareMessageData").withParams(params).execute(context);
		return result == null ? null : pushnotifications.proxies.MessageData.initialize(context, result);
	}
	public static pushnotifications.proxies.MessageView prepareMessageView(IContext context, java.util.List<pushnotifications.proxies.Device> _devices)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		java.util.ArrayList<IMendixObject> listparam_devices = null;
		if (_devices != null)
		{
			listparam_devices = new java.util.ArrayList<>();
			for (pushnotifications.proxies.Device obj : _devices)
				listparam_devices.add(obj.getMendixObject());
		}
		params.put("Devices", listparam_devices);

		IMendixObject result = (IMendixObject)Core.microflowCall("PushNotifications.PrepareMessageView").withParams(params).execute(context);
		return result == null ? null : pushnotifications.proxies.MessageView.initialize(context, result);
	}
	public static void restartAPNS(IContext context, pushnotifications.proxies.APNSSettings _aPNSettings)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("APNSettings", _aPNSettings == null ? null : _aPNSettings.getMendixObject());
		Core.microflowCall("PushNotifications.RestartAPNS").withParams(params).execute(context);
	}
	public static void savePushPreferences(IContext context, pushnotifications.proxies.PushPreferences _pushPreferences)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("PushPreferences", _pushPreferences == null ? null : _pushPreferences.getMendixObject());
		Core.microflowCall("PushNotifications.SavePushPreferences").withParams(params).execute(context);
	}
	public static void sendAPNSMessage(IContext context, pushnotifications.proxies.APNSSettings _aPNSSettings, pushnotifications.proxies.Message _message)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("APNSSettings", _aPNSSettings == null ? null : _aPNSSettings.getMendixObject());
		params.put("Message", _message == null ? null : _message.getMendixObject());
		Core.microflowCall("PushNotifications.SendAPNSMessage").withParams(params).execute(context);
	}
	public static void sendAPNSMessages(IContext context, java.util.List<pushnotifications.proxies.Message> _messageList, pushnotifications.proxies.APNSSettings _aPNSSettings)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		java.util.ArrayList<IMendixObject> listparam_messageList = null;
		if (_messageList != null)
		{
			listparam_messageList = new java.util.ArrayList<>();
			for (pushnotifications.proxies.Message obj : _messageList)
				listparam_messageList.add(obj.getMendixObject());
		}
		params.put("MessageList", listparam_messageList);

		params.put("APNSSettings", _aPNSSettings == null ? null : _aPNSSettings.getMendixObject());
		Core.microflowCall("PushNotifications.SendAPNSMessages").withParams(params).execute(context);
	}
	public static void sendFCMMessage(IContext context, pushnotifications.proxies.FCMSettings _fCMSettings, pushnotifications.proxies.Message _message, java.lang.String _fCMAccessToken)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("FCMSettings", _fCMSettings == null ? null : _fCMSettings.getMendixObject());
		params.put("Message", _message == null ? null : _message.getMendixObject());
		params.put("FCMAccessToken", _fCMAccessToken);
		Core.microflowCall("PushNotifications.SendFCMMessage").withParams(params).execute(context);
	}
	public static void sendFCMMessage_old(IContext context, pushnotifications.proxies.FCMSettings _fCMSettings, pushnotifications.proxies.Message _message, java.lang.String _fCMAccessToken)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("FCMSettings", _fCMSettings == null ? null : _fCMSettings.getMendixObject());
		params.put("Message", _message == null ? null : _message.getMendixObject());
		params.put("FCMAccessToken", _fCMAccessToken);
		Core.microflowCall("PushNotifications.SendFCMMessage_old").withParams(params).execute(context);
	}
	public static void sendFCMMessages(IContext context, java.util.List<pushnotifications.proxies.Message> _messageList, pushnotifications.proxies.FCMSettings _fCMSettings)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		java.util.ArrayList<IMendixObject> listparam_messageList = null;
		if (_messageList != null)
		{
			listparam_messageList = new java.util.ArrayList<>();
			for (pushnotifications.proxies.Message obj : _messageList)
				listparam_messageList.add(obj.getMendixObject());
		}
		params.put("MessageList", listparam_messageList);

		params.put("FCMSettings", _fCMSettings == null ? null : _fCMSettings.getMendixObject());
		Core.microflowCall("PushNotifications.SendFCMMessages").withParams(params).execute(context);
	}
	public static void sendMessages(IContext context)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		Core.microflowCall("PushNotifications.SendMessages").withParams(params).execute(context);
	}
	public static void succeedMessage(IContext context, pushnotifications.proxies.Message _message, java.lang.String _messageId)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("Message", _message == null ? null : _message.getMendixObject());
		params.put("MessageId", _messageId);
		Core.microflowCall("PushNotifications.SucceedMessage").withParams(params).execute(context);
	}
	public static void updateDeviceRegistration(IContext context, java.lang.String _oldRegistrationId, java.lang.String _canonicalRegistrationToken)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("OldRegistrationId", _oldRegistrationId);
		params.put("CanonicalRegistrationToken", _canonicalRegistrationToken);
		Core.microflowCall("PushNotifications.UpdateDeviceRegistration").withParams(params).execute(context);
	}
}