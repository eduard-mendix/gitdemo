// This file was generated by Mendix Studio Pro.
//
// WARNING: Code you write here will be lost the next time you deploy the project.

package pushnotifications.proxies;

public class PushPreferences
{
	private final com.mendix.systemwideinterfaces.core.IMendixObject pushPreferencesMendixObject;

	private final com.mendix.systemwideinterfaces.core.IContext context;

	/**
	 * Internal name of this entity
	 */
	public static final java.lang.String entityName = "PushNotifications.PushPreferences";

	/**
	 * Enum describing members of this entity
	 */
	public enum MemberNames
	{
		AndroidMessagingServiceType("AndroidMessagingServiceType"),
		iOSMessagingServiceType("iOSMessagingServiceType"),
		BaseOnDTAPMode("BaseOnDTAPMode"),
		CurrentDTAPMode("CurrentDTAPMode"),
		MaxRetryCount("MaxRetryCount"),
		RetryInterval("RetryInterval"),
		AndroidMessagingService("PushNotifications.AndroidMessagingService"),
		iOSMessagingService("PushNotifications.iOSMessagingService");

		private java.lang.String metaName;

		MemberNames(java.lang.String s)
		{
			metaName = s;
		}

		@java.lang.Override
		public java.lang.String toString()
		{
			return metaName;
		}
	}

	public PushPreferences(com.mendix.systemwideinterfaces.core.IContext context)
	{
		this(context, com.mendix.core.Core.instantiate(context, "PushNotifications.PushPreferences"));
	}

	protected PushPreferences(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixObject pushPreferencesMendixObject)
	{
		if (pushPreferencesMendixObject == null)
			throw new java.lang.IllegalArgumentException("The given object cannot be null.");
		if (!com.mendix.core.Core.isSubClassOf("PushNotifications.PushPreferences", pushPreferencesMendixObject.getType()))
			throw new java.lang.IllegalArgumentException("The given object is not a PushNotifications.PushPreferences");

		this.pushPreferencesMendixObject = pushPreferencesMendixObject;
		this.context = context;
	}

	/**
	 * @deprecated Use 'PushPreferences.load(IContext, IMendixIdentifier)' instead.
	 */
	@java.lang.Deprecated
	public static pushnotifications.proxies.PushPreferences initialize(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixIdentifier mendixIdentifier) throws com.mendix.core.CoreException
	{
		return pushnotifications.proxies.PushPreferences.load(context, mendixIdentifier);
	}

	/**
	 * Initialize a proxy using context (recommended). This context will be used for security checking when the get- and set-methods without context parameters are called.
	 * The get- and set-methods with context parameter should be used when for instance sudo access is necessary (IContext.createSudoClone() can be used to obtain sudo access).
	 */
	public static pushnotifications.proxies.PushPreferences initialize(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixObject mendixObject)
	{
		return new pushnotifications.proxies.PushPreferences(context, mendixObject);
	}

	public static pushnotifications.proxies.PushPreferences load(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixIdentifier mendixIdentifier) throws com.mendix.core.CoreException
	{
		com.mendix.systemwideinterfaces.core.IMendixObject mendixObject = com.mendix.core.Core.retrieveId(context, mendixIdentifier);
		return pushnotifications.proxies.PushPreferences.initialize(context, mendixObject);
	}

	public static java.util.List<pushnotifications.proxies.PushPreferences> load(com.mendix.systemwideinterfaces.core.IContext context, java.lang.String xpathConstraint) throws com.mendix.core.CoreException
	{
		java.util.List<pushnotifications.proxies.PushPreferences> result = new java.util.ArrayList<pushnotifications.proxies.PushPreferences>();
		for (com.mendix.systemwideinterfaces.core.IMendixObject obj : com.mendix.core.Core.retrieveXPathQuery(context, "//PushNotifications.PushPreferences" + xpathConstraint))
			result.add(pushnotifications.proxies.PushPreferences.initialize(context, obj));
		return result;
	}

	/**
	 * Commit the changes made on this proxy object.
	 */
	public final void commit() throws com.mendix.core.CoreException
	{
		com.mendix.core.Core.commit(context, getMendixObject());
	}

	/**
	 * Commit the changes made on this proxy object using the specified context.
	 */
	public final void commit(com.mendix.systemwideinterfaces.core.IContext context) throws com.mendix.core.CoreException
	{
		com.mendix.core.Core.commit(context, getMendixObject());
	}

	/**
	 * Delete the object.
	 */
	public final void delete()
	{
		com.mendix.core.Core.delete(context, getMendixObject());
	}

	/**
	 * Delete the object using the specified context.
	 */
	public final void delete(com.mendix.systemwideinterfaces.core.IContext context)
	{
		com.mendix.core.Core.delete(context, getMendixObject());
	}
	/**
	 * Set value of AndroidMessagingServiceType
	 * @param androidmessagingservicetype
	 */
	public final pushnotifications.proxies.MessagingServices getAndroidMessagingServiceType()
	{
		return getAndroidMessagingServiceType(getContext());
	}

	/**
	 * @param context
	 * @return value of AndroidMessagingServiceType
	 */
	public final pushnotifications.proxies.MessagingServices getAndroidMessagingServiceType(com.mendix.systemwideinterfaces.core.IContext context)
	{
		Object obj = getMendixObject().getValue(context, MemberNames.AndroidMessagingServiceType.toString());
		if (obj == null)
			return null;

		return pushnotifications.proxies.MessagingServices.valueOf((java.lang.String) obj);
	}

	/**
	 * Set value of AndroidMessagingServiceType
	 * @param androidmessagingservicetype
	 */
	public final void setAndroidMessagingServiceType(pushnotifications.proxies.MessagingServices androidmessagingservicetype)
	{
		setAndroidMessagingServiceType(getContext(), androidmessagingservicetype);
	}

	/**
	 * Set value of AndroidMessagingServiceType
	 * @param context
	 * @param androidmessagingservicetype
	 */
	public final void setAndroidMessagingServiceType(com.mendix.systemwideinterfaces.core.IContext context, pushnotifications.proxies.MessagingServices androidmessagingservicetype)
	{
		if (androidmessagingservicetype != null)
			getMendixObject().setValue(context, MemberNames.AndroidMessagingServiceType.toString(), androidmessagingservicetype.toString());
		else
			getMendixObject().setValue(context, MemberNames.AndroidMessagingServiceType.toString(), null);
	}

	/**
	 * Set value of iOSMessagingServiceType
	 * @param iosmessagingservicetype
	 */
	public final pushnotifications.proxies.MessagingServices getiOSMessagingServiceType()
	{
		return getiOSMessagingServiceType(getContext());
	}

	/**
	 * @param context
	 * @return value of iOSMessagingServiceType
	 */
	public final pushnotifications.proxies.MessagingServices getiOSMessagingServiceType(com.mendix.systemwideinterfaces.core.IContext context)
	{
		Object obj = getMendixObject().getValue(context, MemberNames.iOSMessagingServiceType.toString());
		if (obj == null)
			return null;

		return pushnotifications.proxies.MessagingServices.valueOf((java.lang.String) obj);
	}

	/**
	 * Set value of iOSMessagingServiceType
	 * @param iosmessagingservicetype
	 */
	public final void setiOSMessagingServiceType(pushnotifications.proxies.MessagingServices iosmessagingservicetype)
	{
		setiOSMessagingServiceType(getContext(), iosmessagingservicetype);
	}

	/**
	 * Set value of iOSMessagingServiceType
	 * @param context
	 * @param iosmessagingservicetype
	 */
	public final void setiOSMessagingServiceType(com.mendix.systemwideinterfaces.core.IContext context, pushnotifications.proxies.MessagingServices iosmessagingservicetype)
	{
		if (iosmessagingservicetype != null)
			getMendixObject().setValue(context, MemberNames.iOSMessagingServiceType.toString(), iosmessagingservicetype.toString());
		else
			getMendixObject().setValue(context, MemberNames.iOSMessagingServiceType.toString(), null);
	}

	/**
	 * @return value of BaseOnDTAPMode
	 */
	public final java.lang.Boolean getBaseOnDTAPMode()
	{
		return getBaseOnDTAPMode(getContext());
	}

	/**
	 * @param context
	 * @return value of BaseOnDTAPMode
	 */
	public final java.lang.Boolean getBaseOnDTAPMode(com.mendix.systemwideinterfaces.core.IContext context)
	{
		return (java.lang.Boolean) getMendixObject().getValue(context, MemberNames.BaseOnDTAPMode.toString());
	}

	/**
	 * Set value of BaseOnDTAPMode
	 * @param baseondtapmode
	 */
	public final void setBaseOnDTAPMode(java.lang.Boolean baseondtapmode)
	{
		setBaseOnDTAPMode(getContext(), baseondtapmode);
	}

	/**
	 * Set value of BaseOnDTAPMode
	 * @param context
	 * @param baseondtapmode
	 */
	public final void setBaseOnDTAPMode(com.mendix.systemwideinterfaces.core.IContext context, java.lang.Boolean baseondtapmode)
	{
		getMendixObject().setValue(context, MemberNames.BaseOnDTAPMode.toString(), baseondtapmode);
	}

	/**
	 * Set value of CurrentDTAPMode
	 * @param currentdtapmode
	 */
	public final pushnotifications.proxies.DTAPMode getCurrentDTAPMode()
	{
		return getCurrentDTAPMode(getContext());
	}

	/**
	 * @param context
	 * @return value of CurrentDTAPMode
	 */
	public final pushnotifications.proxies.DTAPMode getCurrentDTAPMode(com.mendix.systemwideinterfaces.core.IContext context)
	{
		Object obj = getMendixObject().getValue(context, MemberNames.CurrentDTAPMode.toString());
		if (obj == null)
			return null;

		return pushnotifications.proxies.DTAPMode.valueOf((java.lang.String) obj);
	}

	/**
	 * Set value of CurrentDTAPMode
	 * @param currentdtapmode
	 */
	public final void setCurrentDTAPMode(pushnotifications.proxies.DTAPMode currentdtapmode)
	{
		setCurrentDTAPMode(getContext(), currentdtapmode);
	}

	/**
	 * Set value of CurrentDTAPMode
	 * @param context
	 * @param currentdtapmode
	 */
	public final void setCurrentDTAPMode(com.mendix.systemwideinterfaces.core.IContext context, pushnotifications.proxies.DTAPMode currentdtapmode)
	{
		if (currentdtapmode != null)
			getMendixObject().setValue(context, MemberNames.CurrentDTAPMode.toString(), currentdtapmode.toString());
		else
			getMendixObject().setValue(context, MemberNames.CurrentDTAPMode.toString(), null);
	}

	/**
	 * @return value of MaxRetryCount
	 */
	public final java.lang.Integer getMaxRetryCount()
	{
		return getMaxRetryCount(getContext());
	}

	/**
	 * @param context
	 * @return value of MaxRetryCount
	 */
	public final java.lang.Integer getMaxRetryCount(com.mendix.systemwideinterfaces.core.IContext context)
	{
		return (java.lang.Integer) getMendixObject().getValue(context, MemberNames.MaxRetryCount.toString());
	}

	/**
	 * Set value of MaxRetryCount
	 * @param maxretrycount
	 */
	public final void setMaxRetryCount(java.lang.Integer maxretrycount)
	{
		setMaxRetryCount(getContext(), maxretrycount);
	}

	/**
	 * Set value of MaxRetryCount
	 * @param context
	 * @param maxretrycount
	 */
	public final void setMaxRetryCount(com.mendix.systemwideinterfaces.core.IContext context, java.lang.Integer maxretrycount)
	{
		getMendixObject().setValue(context, MemberNames.MaxRetryCount.toString(), maxretrycount);
	}

	/**
	 * @return value of RetryInterval
	 */
	public final java.lang.Integer getRetryInterval()
	{
		return getRetryInterval(getContext());
	}

	/**
	 * @param context
	 * @return value of RetryInterval
	 */
	public final java.lang.Integer getRetryInterval(com.mendix.systemwideinterfaces.core.IContext context)
	{
		return (java.lang.Integer) getMendixObject().getValue(context, MemberNames.RetryInterval.toString());
	}

	/**
	 * Set value of RetryInterval
	 * @param retryinterval
	 */
	public final void setRetryInterval(java.lang.Integer retryinterval)
	{
		setRetryInterval(getContext(), retryinterval);
	}

	/**
	 * Set value of RetryInterval
	 * @param context
	 * @param retryinterval
	 */
	public final void setRetryInterval(com.mendix.systemwideinterfaces.core.IContext context, java.lang.Integer retryinterval)
	{
		getMendixObject().setValue(context, MemberNames.RetryInterval.toString(), retryinterval);
	}

	/**
	 * @return value of AndroidMessagingService
	 */
	public final pushnotifications.proxies.MessagingServiceSettings getAndroidMessagingService() throws com.mendix.core.CoreException
	{
		return getAndroidMessagingService(getContext());
	}

	/**
	 * @param context
	 * @return value of AndroidMessagingService
	 */
	public final pushnotifications.proxies.MessagingServiceSettings getAndroidMessagingService(com.mendix.systemwideinterfaces.core.IContext context) throws com.mendix.core.CoreException
	{
		pushnotifications.proxies.MessagingServiceSettings result = null;
		com.mendix.systemwideinterfaces.core.IMendixIdentifier identifier = getMendixObject().getValue(context, MemberNames.AndroidMessagingService.toString());
		if (identifier != null)
			result = pushnotifications.proxies.MessagingServiceSettings.load(context, identifier);
		return result;
	}

	/**
	 * Set value of AndroidMessagingService
	 * @param androidmessagingservice
	 */
	public final void setAndroidMessagingService(pushnotifications.proxies.MessagingServiceSettings androidmessagingservice)
	{
		setAndroidMessagingService(getContext(), androidmessagingservice);
	}

	/**
	 * Set value of AndroidMessagingService
	 * @param context
	 * @param androidmessagingservice
	 */
	public final void setAndroidMessagingService(com.mendix.systemwideinterfaces.core.IContext context, pushnotifications.proxies.MessagingServiceSettings androidmessagingservice)
	{
		if (androidmessagingservice == null)
			getMendixObject().setValue(context, MemberNames.AndroidMessagingService.toString(), null);
		else
			getMendixObject().setValue(context, MemberNames.AndroidMessagingService.toString(), androidmessagingservice.getMendixObject().getId());
	}

	/**
	 * @return value of iOSMessagingService
	 */
	public final pushnotifications.proxies.MessagingServiceSettings getiOSMessagingService() throws com.mendix.core.CoreException
	{
		return getiOSMessagingService(getContext());
	}

	/**
	 * @param context
	 * @return value of iOSMessagingService
	 */
	public final pushnotifications.proxies.MessagingServiceSettings getiOSMessagingService(com.mendix.systemwideinterfaces.core.IContext context) throws com.mendix.core.CoreException
	{
		pushnotifications.proxies.MessagingServiceSettings result = null;
		com.mendix.systemwideinterfaces.core.IMendixIdentifier identifier = getMendixObject().getValue(context, MemberNames.iOSMessagingService.toString());
		if (identifier != null)
			result = pushnotifications.proxies.MessagingServiceSettings.load(context, identifier);
		return result;
	}

	/**
	 * Set value of iOSMessagingService
	 * @param iosmessagingservice
	 */
	public final void setiOSMessagingService(pushnotifications.proxies.MessagingServiceSettings iosmessagingservice)
	{
		setiOSMessagingService(getContext(), iosmessagingservice);
	}

	/**
	 * Set value of iOSMessagingService
	 * @param context
	 * @param iosmessagingservice
	 */
	public final void setiOSMessagingService(com.mendix.systemwideinterfaces.core.IContext context, pushnotifications.proxies.MessagingServiceSettings iosmessagingservice)
	{
		if (iosmessagingservice == null)
			getMendixObject().setValue(context, MemberNames.iOSMessagingService.toString(), null);
		else
			getMendixObject().setValue(context, MemberNames.iOSMessagingService.toString(), iosmessagingservice.getMendixObject().getId());
	}

	/**
	 * @return the IMendixObject instance of this proxy for use in the Core interface.
	 */
	public final com.mendix.systemwideinterfaces.core.IMendixObject getMendixObject()
	{
		return pushPreferencesMendixObject;
	}

	/**
	 * @return the IContext instance of this proxy, or null if no IContext instance was specified at initialization.
	 */
	public final com.mendix.systemwideinterfaces.core.IContext getContext()
	{
		return context;
	}

	@java.lang.Override
	public boolean equals(Object obj)
	{
		if (obj == this)
			return true;

		if (obj != null && getClass().equals(obj.getClass()))
		{
			final pushnotifications.proxies.PushPreferences that = (pushnotifications.proxies.PushPreferences) obj;
			return getMendixObject().equals(that.getMendixObject());
		}
		return false;
	}

	@java.lang.Override
	public int hashCode()
	{
		return getMendixObject().hashCode();
	}

	/**
	 * @return String name of this class
	 */
	public static java.lang.String getType()
	{
		return "PushNotifications.PushPreferences";
	}

	/**
	 * @return String GUID from this object, format: ID_0000000000
	 * @deprecated Use getMendixObject().getId().toLong() to get a unique identifier for this object.
	 */
	@java.lang.Deprecated
	public java.lang.String getGUID()
	{
		return "ID_" + getMendixObject().getId().toLong();
	}
}
