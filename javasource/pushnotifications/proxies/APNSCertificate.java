// This file was generated by Mendix Studio Pro.
//
// WARNING: Code you write here will be lost the next time you deploy the project.

package pushnotifications.proxies;

public class APNSCertificate extends system.proxies.FileDocument
{
	/**
	 * Internal name of this entity
	 */
	public static final java.lang.String entityName = "PushNotifications.APNSCertificate";

	/**
	 * Enum describing members of this entity
	 */
	public enum MemberNames
	{
		Passcode("Passcode"),
		FileID("FileID"),
		Name("Name"),
		DeleteAfterDownload("DeleteAfterDownload"),
		Contents("Contents"),
		HasContents("HasContents"),
		Size("Size"),
		APNSSettings_APNSCertificate("PushNotifications.APNSSettings_APNSCertificate");

		private java.lang.String metaName;

		MemberNames(java.lang.String s)
		{
			metaName = s;
		}

		@java.lang.Override
		public java.lang.String toString()
		{
			return metaName;
		}
	}

	public APNSCertificate(com.mendix.systemwideinterfaces.core.IContext context)
	{
		this(context, com.mendix.core.Core.instantiate(context, "PushNotifications.APNSCertificate"));
	}

	protected APNSCertificate(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixObject aPNSCertificateMendixObject)
	{
		super(context, aPNSCertificateMendixObject);
		if (!com.mendix.core.Core.isSubClassOf("PushNotifications.APNSCertificate", aPNSCertificateMendixObject.getType()))
			throw new java.lang.IllegalArgumentException("The given object is not a PushNotifications.APNSCertificate");
	}

	/**
	 * @deprecated Use 'APNSCertificate.load(IContext, IMendixIdentifier)' instead.
	 */
	@java.lang.Deprecated
	public static pushnotifications.proxies.APNSCertificate initialize(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixIdentifier mendixIdentifier) throws com.mendix.core.CoreException
	{
		return pushnotifications.proxies.APNSCertificate.load(context, mendixIdentifier);
	}

	/**
	 * Initialize a proxy using context (recommended). This context will be used for security checking when the get- and set-methods without context parameters are called.
	 * The get- and set-methods with context parameter should be used when for instance sudo access is necessary (IContext.createSudoClone() can be used to obtain sudo access).
	 */
	public static pushnotifications.proxies.APNSCertificate initialize(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixObject mendixObject)
	{
		return new pushnotifications.proxies.APNSCertificate(context, mendixObject);
	}

	public static pushnotifications.proxies.APNSCertificate load(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixIdentifier mendixIdentifier) throws com.mendix.core.CoreException
	{
		com.mendix.systemwideinterfaces.core.IMendixObject mendixObject = com.mendix.core.Core.retrieveId(context, mendixIdentifier);
		return pushnotifications.proxies.APNSCertificate.initialize(context, mendixObject);
	}

	public static java.util.List<pushnotifications.proxies.APNSCertificate> load(com.mendix.systemwideinterfaces.core.IContext context, java.lang.String xpathConstraint) throws com.mendix.core.CoreException
	{
		java.util.List<pushnotifications.proxies.APNSCertificate> result = new java.util.ArrayList<pushnotifications.proxies.APNSCertificate>();
		for (com.mendix.systemwideinterfaces.core.IMendixObject obj : com.mendix.core.Core.retrieveXPathQuery(context, "//PushNotifications.APNSCertificate" + xpathConstraint))
			result.add(pushnotifications.proxies.APNSCertificate.initialize(context, obj));
		return result;
	}

	/**
	 * @return value of Passcode
	 */
	public final java.lang.String getPasscode()
	{
		return getPasscode(getContext());
	}

	/**
	 * @param context
	 * @return value of Passcode
	 */
	public final java.lang.String getPasscode(com.mendix.systemwideinterfaces.core.IContext context)
	{
		return (java.lang.String) getMendixObject().getValue(context, MemberNames.Passcode.toString());
	}

	/**
	 * Set value of Passcode
	 * @param passcode
	 */
	public final void setPasscode(java.lang.String passcode)
	{
		setPasscode(getContext(), passcode);
	}

	/**
	 * Set value of Passcode
	 * @param context
	 * @param passcode
	 */
	public final void setPasscode(com.mendix.systemwideinterfaces.core.IContext context, java.lang.String passcode)
	{
		getMendixObject().setValue(context, MemberNames.Passcode.toString(), passcode);
	}

	/**
	 * @return value of APNSSettings_APNSCertificate
	 */
	public final pushnotifications.proxies.APNSSettings getAPNSSettings_APNSCertificate() throws com.mendix.core.CoreException
	{
		return getAPNSSettings_APNSCertificate(getContext());
	}

	/**
	 * @param context
	 * @return value of APNSSettings_APNSCertificate
	 */
	public final pushnotifications.proxies.APNSSettings getAPNSSettings_APNSCertificate(com.mendix.systemwideinterfaces.core.IContext context) throws com.mendix.core.CoreException
	{
		pushnotifications.proxies.APNSSettings result = null;
		com.mendix.systemwideinterfaces.core.IMendixIdentifier identifier = getMendixObject().getValue(context, MemberNames.APNSSettings_APNSCertificate.toString());
		if (identifier != null)
			result = pushnotifications.proxies.APNSSettings.load(context, identifier);
		return result;
	}

	/**
	 * Set value of APNSSettings_APNSCertificate
	 * @param apnssettings_apnscertificate
	 */
	public final void setAPNSSettings_APNSCertificate(pushnotifications.proxies.APNSSettings apnssettings_apnscertificate)
	{
		setAPNSSettings_APNSCertificate(getContext(), apnssettings_apnscertificate);
	}

	/**
	 * Set value of APNSSettings_APNSCertificate
	 * @param context
	 * @param apnssettings_apnscertificate
	 */
	public final void setAPNSSettings_APNSCertificate(com.mendix.systemwideinterfaces.core.IContext context, pushnotifications.proxies.APNSSettings apnssettings_apnscertificate)
	{
		if (apnssettings_apnscertificate == null)
			getMendixObject().setValue(context, MemberNames.APNSSettings_APNSCertificate.toString(), null);
		else
			getMendixObject().setValue(context, MemberNames.APNSSettings_APNSCertificate.toString(), apnssettings_apnscertificate.getMendixObject().getId());
	}

	@java.lang.Override
	public boolean equals(Object obj)
	{
		if (obj == this)
			return true;

		if (obj != null && getClass().equals(obj.getClass()))
		{
			final pushnotifications.proxies.APNSCertificate that = (pushnotifications.proxies.APNSCertificate) obj;
			return getMendixObject().equals(that.getMendixObject());
		}
		return false;
	}

	@java.lang.Override
	public int hashCode()
	{
		return getMendixObject().hashCode();
	}

	/**
	 * @return String name of this class
	 */
	public static java.lang.String getType()
	{
		return "PushNotifications.APNSCertificate";
	}

	/**
	 * @return String GUID from this object, format: ID_0000000000
	 * @deprecated Use getMendixObject().getId().toLong() to get a unique identifier for this object.
	 */
	@java.lang.Override
	@java.lang.Deprecated
	public java.lang.String getGUID()
	{
		return "ID_" + getMendixObject().getId().toLong();
	}
}
