// This file was generated by Mendix Studio Pro.
//
// WARNING: Code you write here will be lost the next time you deploy the project.

package homeautomationconnector.proxies;

public class Connector
{
	private final com.mendix.systemwideinterfaces.core.IMendixObject connectorMendixObject;

	private final com.mendix.systemwideinterfaces.core.IContext context;

	/**
	 * Internal name of this entity
	 */
	public static final java.lang.String entityName = "HomeAutomationConnector.Connector";

	/**
	 * Enum describing members of this entity
	 */
	public enum MemberNames
	{
		IPAddress("IPAddress"),
		ClientID("ClientID"),
		APIAddress("APIAddress"),
		TestAddress("TestAddress");

		private java.lang.String metaName;

		MemberNames(java.lang.String s)
		{
			metaName = s;
		}

		@java.lang.Override
		public java.lang.String toString()
		{
			return metaName;
		}
	}

	public Connector(com.mendix.systemwideinterfaces.core.IContext context)
	{
		this(context, com.mendix.core.Core.instantiate(context, "HomeAutomationConnector.Connector"));
	}

	protected Connector(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixObject connectorMendixObject)
	{
		if (connectorMendixObject == null)
			throw new java.lang.IllegalArgumentException("The given object cannot be null.");
		if (!com.mendix.core.Core.isSubClassOf("HomeAutomationConnector.Connector", connectorMendixObject.getType()))
			throw new java.lang.IllegalArgumentException("The given object is not a HomeAutomationConnector.Connector");

		this.connectorMendixObject = connectorMendixObject;
		this.context = context;
	}

	/**
	 * @deprecated Use 'Connector.load(IContext, IMendixIdentifier)' instead.
	 */
	@java.lang.Deprecated
	public static homeautomationconnector.proxies.Connector initialize(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixIdentifier mendixIdentifier) throws com.mendix.core.CoreException
	{
		return homeautomationconnector.proxies.Connector.load(context, mendixIdentifier);
	}

	/**
	 * Initialize a proxy using context (recommended). This context will be used for security checking when the get- and set-methods without context parameters are called.
	 * The get- and set-methods with context parameter should be used when for instance sudo access is necessary (IContext.createSudoClone() can be used to obtain sudo access).
	 */
	public static homeautomationconnector.proxies.Connector initialize(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixObject mendixObject)
	{
		return new homeautomationconnector.proxies.Connector(context, mendixObject);
	}

	public static homeautomationconnector.proxies.Connector load(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixIdentifier mendixIdentifier) throws com.mendix.core.CoreException
	{
		com.mendix.systemwideinterfaces.core.IMendixObject mendixObject = com.mendix.core.Core.retrieveId(context, mendixIdentifier);
		return homeautomationconnector.proxies.Connector.initialize(context, mendixObject);
	}

	public static java.util.List<homeautomationconnector.proxies.Connector> load(com.mendix.systemwideinterfaces.core.IContext context, java.lang.String xpathConstraint) throws com.mendix.core.CoreException
	{
		java.util.List<homeautomationconnector.proxies.Connector> result = new java.util.ArrayList<homeautomationconnector.proxies.Connector>();
		for (com.mendix.systemwideinterfaces.core.IMendixObject obj : com.mendix.core.Core.retrieveXPathQuery(context, "//HomeAutomationConnector.Connector" + xpathConstraint))
			result.add(homeautomationconnector.proxies.Connector.initialize(context, obj));
		return result;
	}

	/**
	 * Commit the changes made on this proxy object.
	 */
	public final void commit() throws com.mendix.core.CoreException
	{
		com.mendix.core.Core.commit(context, getMendixObject());
	}

	/**
	 * Commit the changes made on this proxy object using the specified context.
	 */
	public final void commit(com.mendix.systemwideinterfaces.core.IContext context) throws com.mendix.core.CoreException
	{
		com.mendix.core.Core.commit(context, getMendixObject());
	}

	/**
	 * Delete the object.
	 */
	public final void delete()
	{
		com.mendix.core.Core.delete(context, getMendixObject());
	}

	/**
	 * Delete the object using the specified context.
	 */
	public final void delete(com.mendix.systemwideinterfaces.core.IContext context)
	{
		com.mendix.core.Core.delete(context, getMendixObject());
	}
	/**
	 * @return value of IPAddress
	 */
	public final java.lang.String getIPAddress()
	{
		return getIPAddress(getContext());
	}

	/**
	 * @param context
	 * @return value of IPAddress
	 */
	public final java.lang.String getIPAddress(com.mendix.systemwideinterfaces.core.IContext context)
	{
		return (java.lang.String) getMendixObject().getValue(context, MemberNames.IPAddress.toString());
	}

	/**
	 * Set value of IPAddress
	 * @param ipaddress
	 */
	public final void setIPAddress(java.lang.String ipaddress)
	{
		setIPAddress(getContext(), ipaddress);
	}

	/**
	 * Set value of IPAddress
	 * @param context
	 * @param ipaddress
	 */
	public final void setIPAddress(com.mendix.systemwideinterfaces.core.IContext context, java.lang.String ipaddress)
	{
		getMendixObject().setValue(context, MemberNames.IPAddress.toString(), ipaddress);
	}

	/**
	 * @return value of ClientID
	 */
	public final java.lang.String getClientID()
	{
		return getClientID(getContext());
	}

	/**
	 * @param context
	 * @return value of ClientID
	 */
	public final java.lang.String getClientID(com.mendix.systemwideinterfaces.core.IContext context)
	{
		return (java.lang.String) getMendixObject().getValue(context, MemberNames.ClientID.toString());
	}

	/**
	 * Set value of ClientID
	 * @param clientid
	 */
	public final void setClientID(java.lang.String clientid)
	{
		setClientID(getContext(), clientid);
	}

	/**
	 * Set value of ClientID
	 * @param context
	 * @param clientid
	 */
	public final void setClientID(com.mendix.systemwideinterfaces.core.IContext context, java.lang.String clientid)
	{
		getMendixObject().setValue(context, MemberNames.ClientID.toString(), clientid);
	}

	/**
	 * @return value of APIAddress
	 */
	public final java.lang.String getAPIAddress()
	{
		return getAPIAddress(getContext());
	}

	/**
	 * @param context
	 * @return value of APIAddress
	 */
	public final java.lang.String getAPIAddress(com.mendix.systemwideinterfaces.core.IContext context)
	{
		return (java.lang.String) getMendixObject().getValue(context, MemberNames.APIAddress.toString());
	}

	/**
	 * Set value of APIAddress
	 * @param apiaddress
	 */
	public final void setAPIAddress(java.lang.String apiaddress)
	{
		setAPIAddress(getContext(), apiaddress);
	}

	/**
	 * Set value of APIAddress
	 * @param context
	 * @param apiaddress
	 */
	public final void setAPIAddress(com.mendix.systemwideinterfaces.core.IContext context, java.lang.String apiaddress)
	{
		getMendixObject().setValue(context, MemberNames.APIAddress.toString(), apiaddress);
	}

	/**
	 * @return value of TestAddress
	 */
	public final java.lang.String getTestAddress()
	{
		return getTestAddress(getContext());
	}

	/**
	 * @param context
	 * @return value of TestAddress
	 */
	public final java.lang.String getTestAddress(com.mendix.systemwideinterfaces.core.IContext context)
	{
		return (java.lang.String) getMendixObject().getValue(context, MemberNames.TestAddress.toString());
	}

	/**
	 * Set value of TestAddress
	 * @param testaddress
	 */
	public final void setTestAddress(java.lang.String testaddress)
	{
		setTestAddress(getContext(), testaddress);
	}

	/**
	 * Set value of TestAddress
	 * @param context
	 * @param testaddress
	 */
	public final void setTestAddress(com.mendix.systemwideinterfaces.core.IContext context, java.lang.String testaddress)
	{
		getMendixObject().setValue(context, MemberNames.TestAddress.toString(), testaddress);
	}

	/**
	 * @return the IMendixObject instance of this proxy for use in the Core interface.
	 */
	public final com.mendix.systemwideinterfaces.core.IMendixObject getMendixObject()
	{
		return connectorMendixObject;
	}

	/**
	 * @return the IContext instance of this proxy, or null if no IContext instance was specified at initialization.
	 */
	public final com.mendix.systemwideinterfaces.core.IContext getContext()
	{
		return context;
	}

	@java.lang.Override
	public boolean equals(Object obj)
	{
		if (obj == this)
			return true;

		if (obj != null && getClass().equals(obj.getClass()))
		{
			final homeautomationconnector.proxies.Connector that = (homeautomationconnector.proxies.Connector) obj;
			return getMendixObject().equals(that.getMendixObject());
		}
		return false;
	}

	@java.lang.Override
	public int hashCode()
	{
		return getMendixObject().hashCode();
	}

	/**
	 * @return String name of this class
	 */
	public static java.lang.String getType()
	{
		return "HomeAutomationConnector.Connector";
	}

	/**
	 * @return String GUID from this object, format: ID_0000000000
	 * @deprecated Use getMendixObject().getId().toLong() to get a unique identifier for this object.
	 */
	@java.lang.Deprecated
	public java.lang.String getGUID()
	{
		return "ID_" + getMendixObject().getId().toLong();
	}
}
