// This file was generated by Mendix Studio Pro.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
// Special characters, e.g., é, ö, à, etc. are supported in comments.

package homeautomationconnector.actions;

import com.mendix.core.Core;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.webui.CustomJavaAction;
import com.mendix.logging.ILogNode;
import com.mendix.thirdparty.org.json.JSONObject;
import com.mendix.thirdparty.org.json.JSONArray;

public class JSON_Reformatter extends CustomJavaAction<java.lang.String>
{
	private java.lang.String JSON;

	public JSON_Reformatter(IContext context, java.lang.String JSON)
	{
		super(context);
		this.JSON = JSON;
	}

	@java.lang.Override
	public java.lang.String executeAction() throws Exception
	{
		// BEGIN USER CODE
		ILogNode myLog = Core.getLogger("JSONConverter");
		JSONObject output = new JSONObject();
		JSONObject full = new JSONObject(JSON);
		try {
			JSONObject config = full.optJSONObject("config");
			JSONObject lights = full.optJSONObject("lights");
			JSONObject groups = full.optJSONObject("groups");
			JSONObject resourcelinks = full.optJSONObject("resourcelinks");
			JSONObject rules = full.optJSONObject("rules");
			JSONObject scenes = full.optJSONObject("scenes");
			JSONObject schedules = full.optJSONObject("schedules");
			output.put("schedules", convert(schedules));
			output.put("scenes", convert(scenes));
			output.put("rules", convert(rules));
			output.put("resourcelinks", convert(resourcelinks));
			output.put("groups", convert(groups));
			output.put("lights", convert(lights));
			// Fix the config/whitelist. make it from a list of object into an array. Include the ID as part of the array element.
			JSONObject configwhitelist = config.optJSONObject("whitelist");
			JSONObject newconfig = full.optJSONObject("config");
			newconfig.remove("whitelist");
			newconfig.put("whitelist", convert(configwhitelist));
			output.put("config", newconfig);
		} catch (Exception e) {
			myLog.error("Exception while parsing JSON. JSON does not contain expected keys.");
	    }
		return output.toString();
		// END USER CODE
	}

	/**
	 * Returns a string representation of this action
	 */
	@java.lang.Override
	public java.lang.String toString()
	{
		return "JSON_Reformatter";
	}

	// BEGIN EXTRA CODE
	public com.mendix.thirdparty.org.json.JSONArray convert(JSONObject jo)
	{
		JSONArray ja = new JSONArray();
		jo.keys().forEachRemaining(key -> {
	        JSONObject value = jo.optJSONObject(key);
	        value.put("id", key);
	        ja.put(value);
	    });
		return ja;
	}
	// END EXTRA CODE
}
