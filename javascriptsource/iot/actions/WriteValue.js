// This file was generated by Mendix Studio Pro.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
import { Big } from "big.js";

// BEGIN EXTRA CODE
// END EXTRA CODE

/**
 * @param {string} serviceUUID
 * @param {MxObject} characteristic
 * @param {MxObject} measurement
 * @returns {Promise.<boolean>}
 */
export async function WriteValue(serviceUUID, characteristic, measurement) {
	// BEGIN USER CODE
	const gattServer = window.gattServer;

	if(gattServer && gattServer.connected) {
		return new Promise((resolve, reject) => {
			gattServer.getPrimaryService(serviceUUID)
			.then( (primaryService) => {
				return primaryService.getCharacteristic( characteristic.get('UUID') );
			}).then( (characteristicObj) => {
				if (!characteristicObj.properties.write && !characteristicObj.properties.writeWithoutResponse) {
					reject('Characteristic ' + characteristic.get('UUID') + ' can not be written to');
					return;
				}
				let byteSize = 0;
				for (let i = 1; i <= 9; i++) {
					let typeValue = characteristic.get('TypeValue0' + i);
					if (typeValue !== undefined && typeValue !== '') {
						byteSize += parseInt(typeValue.match(/\d+/))/8;
					}
				}
				if (characteristic.get('StringValue')) {
					byteSize += measurement.get('ValueString').length;
				}
				let byteIndex = 0;
				const dataView = new DataView(new ArrayBuffer(byteSize));
				for (let i = 1; i <= 9; i++) {
					let typeValue = characteristic.get('TypeValue0' + i);
					if (typeValue !== undefined && typeValue !== '') {
						let measurementNumber = 0;
						if (typeValue.toLowerCase().indexOf('float') !== -1) {
							measurementNumber = parseFloat(measurement.get('Value0' + i));
						} else {
							measurementNumber = parseInt(measurement.get('Value0' + i));
						}
						dataView['set' + typeValue](byteIndex, measurementNumber, true);
						byteIndex += parseInt(typeValue.match(/\d+/))/8;
					}
				}
				if (characteristic.get('StringValue')) {
					for ( let i = 0, strLen = string.length; i < strLen; i++ ) {
						dataView.setUint8(string.charCodeAt(i), byteIndex + i);
					}
				}
				characteristicObj.writeValue(dataView.buffer);
				resolve(true);
			});
		});	
	} else{
		return Promise.reject('Not connected to gatt server');
	}
	// END USER CODE
}
